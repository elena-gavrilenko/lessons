# Тестовое задание React

Нужно разработать приложение со списком todo в формате Single Page Application.

**Требования к приложению.**

1. Приложение должно содержать 2 страницы: главная и список todo
2. Переход между страницами должен быть реализован через navbar
3. На главной странице должно быть лого и краткое описание страницы
4. На странице для списка todo должен быть интерактивный список
5. Данные для списка должны быть запрошены с `https://jsonplaceholder.typicode.com/todos`
6. Должна быть реализована возможность добавления/изменения/удаления todo
7. Должна быть реализована пагинация без перезагрузки страницы



https://github.com/bradtraversy/simple_react_pagination/blob/master/src/components/Posts.js

**Нужно использовать:**

- React
- Redux
- React router

**Будет плюсом:**

- Next js
- Typescript

**Можно использовать:**

- Axios
- Css библиотеки

**Нельзя использовать:**

- Библиотеки с готовыми компонентами или плагины для React, которые

предоставляют готовый функционал, требуемый в задании

- CMS системы

**Критерии оценки:**

- Работоспособность согласно ТЗ
- Архитектура решения
- Качество кода
- Удобство проверки

Результат тестового задания необходимо отправить в наш whatsapp ответным сообщением. Ссылка на репозиторий в [https://github.com/](https://github.com/) .

С уважением, Анна, WelbeX.


# Тестовое задание Nodejs

**Требования к заданию:**

Приложение представляет собой страницу, на которой могут делать записи любые авторизованные пользователи.

1. Необходимо реализовать регистрацию и авторизацию пользователя, а также проверку JWT-токена при внесении записей на страницу
2. Запись блога содержит:
    1. Дата записи
    2. Сообщение: может содержать как текст, так и медиа
    3. Автор сообщения
3. На странице с записями должна быть реализована пагинация, на каждой странице (пагинации) должно отображаться по 20 записей
4. Автор записи может редактировать или удалять запись
5. Базу данных необходимо заполнить стартовыми записями
6. Необходимо выполнить деплой сервера для публичного доступа
7. Необходимо написать документацию к эндпоинтам (вручную или сгенерировать из кода)

**Можно использовать:**

- База данных может быть PostgreSQL или MongoDB
- Возможность express
- Библиотеки для работы с ORM
- TypeScript (будет плюсом)

**Нельзя использовать:**

- Nuxt.js / Next.js

**Критерии оценки:**

- Работоспособность согласно ТЗ
- Архитектура решения
- Чистота кода
- Удобство проверки

Результат тестового задания необходимо отправить в наш whatsapp ответным сообщением. Ссылка на репозиторий в [https://github.com/](https://github.com/) .