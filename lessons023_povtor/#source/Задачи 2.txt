Сделайте функцию, которая параметром будет принимать массив с числами и возвращать максимальное и минимальное значение из этого массива в виде следующего объекта:

{
	max: 9,
	min: 1,
}




Рекурсия:
Написать функцию, которая считает сумму цифр числа.
Например: число 1357, сумма 1 + 3 + 5 + 7 = 16.




Вам поручили задачу на проекте. Необходимо разработать словарь, в который можно добавлять слова с их описанием, удалять слова и получать их.
Для начала создайте класс Dictionary. Его конструктор принимает 1 параметр name. Инициализируйте данное значение при помощи this. Также в конструкторе должно объявляться поле words, которое по умолчанию должно быть пустым объектом.

Вам необходимо в класс Dictionary добавить 4 метода:
1. add. Данный метод добавляет новое слово в словарь. Он принимает в себя 2 параметра: word - слово (тип данных строка) description - описание слова (тип данных строка)
Присвойте объекту words по ключу word (этот параметр передали в метод add) значение объекта, в котором будут храниться данные о слове и его описание.

Пример объекта words после добавления слова "js":
// words
{
js: {
word: 'js',
description: 'язык программирования',
}
}

Если слово уже существует в объекте words, то не нужно перезаписывать слово, которое уже было сохранено ранее. 

2) remove. Данный метод удаляет слово из словаря. Он принимает в себя ключ по которому нужно удалить объект слова из объекта words

3. get. Данный метод получает слово из словаря. Он принимает в себя ключ из объекта words. Из метода необходимо возвратить найденный объект слова по переданному параметру ключа

4. showAllWords. Данный метод не принимает в себя никаких параметров. Его задача состоит в том, чтобы вывести все слова, которые есть в объекте words, в консоль в формате “word - description” (word - само слово, description - описание слова)

Для тестирования написанного класса используйте данный код:
const dictionary = new Dictionary('Толковый словарь');
dictionary.add('JavaScript', 'популярный язык программирования');
dictionary.add('Веб-разработчик', 'Человек, который создает новые
сервисы и сайты или поддерживает и дополняет существующие');
dictionary.remove('JavaScript');
dictionary.showAllWords();
// Веб-разработчик - Человек, который создает новые
// сервисы и сайты или поддерживает и дополняет существующие





Представьте, что вас как веб-разработчика попросили разработать веб-платформу, которая будет отслеживать прогресс студентов в обучении веб-разработке.
Для начала вам необходимо создать объект student, в котором будут 3 свойства:

1. stack. Массив из строк, где каждая строка - это технология. Изначально, массив stack должен быть равен [‘HTML’].

2. level. Тип данных number. level отвечает за текущий уровень студента и изначально равен 1.
3. improveLevel. Функция, которая сначала увеличивает значение свойства level у студента на единицу. Если level равен 2-м, то вам необходимо добавить в конец массива stack значение ‘CSS’, если 3-м - добавляете в конец stack значение ‘JavaScript’, 4-м - ‘React’, 5-ти - ‘NodeJS’. Если значение level стало больше 5-ти, то вам необходимо вывести в модальном окне через alert сообщение “Студент выучил все технологии!”. Также функция improveLevel должна возвращать в самом конце
обновленный объект student.

В итоге значение свойства stack после выполнения кода ниже должно быть равно:
["HTML", "CSS", "JavaScript", "React", "NodeJS"].

student
.improveLevel()
.improveLevel()
.improveLevel()
.improveLevel()
.improveLevel()

Примечание: цепочка из подряд идущих функций impoveLevel работает так, потому что improveLevel возвращает объект student, а у объекта student есть метод impoveLevel.

Посмотрите на пример:
const student = {
improveLevel() {
return this;
}
};
student
.improveLevel()
.improveLevel()
.improveLevel()